{"ast":null,"code":"var _jsxFileName = \"/Users/danny714/Desktop/FacePage/frontend/src/components/Timeline/SinglePost/SinglePost.jsx\",\n  _s = $RefreshSig$();\nimport { useQuery } from '@tanstack/react-query';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPostAPI } from '../../../services/postServices';\nimport { Card } from 'react-bootstrap';\nimport { getCommentsAPI } from '../../../services/commentServices';\nimport './SinglePost.css';\nimport PostComments from '../Comments/PostComments';\nimport { useSelector } from 'react-redux';\nimport Navbar from '../Navbar/Navbar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SinglePost = () => {\n  _s();\n  const {\n    user\n  } = useSelector(state => {\n    var _state$auth;\n    return state === null || state === void 0 ? void 0 : (_state$auth = state.auth) === null || _state$auth === void 0 ? void 0 : _state$auth.user;\n  });\n  const {\n    _id\n  } = useParams();\n  const {\n    data: postData\n  } = useQuery({\n    queryFn: () => getPostAPI(_id),\n    queryKey: ['post', _id]\n  });\n  const {\n    data: commentData,\n    isError,\n    isLoading,\n    error\n  } = useQuery({\n    queryFn: () => getCommentsAPI(_id),\n    queryKey: ['comment', _id]\n  });\n  if (postData) {\n    var _post$author;\n    const {\n      post\n    } = postData;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-post-body\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          className: \"single-post-card\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"single-post-user-img\",\n              src: (_post$author = post.author) === null || _post$author === void 0 ? void 0 : _post$author.image,\n              alt: \"user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 13\n            }, this), post && post.author ? post.author.username : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No user data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 59\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n            children: post && post.title ? post.title : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 48\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: post && post.content ? post.content : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 61\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PostComments, {\n          postId: post._id,\n          authorId: user._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), commentData === null || commentData === void 0 ? void 0 : commentData.map(comment => /*#__PURE__*/_jsxDEV(Card, {\n          className: \"comment-card\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            children: comment.comment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            children: [\"Comment by -\", comment.author && comment.author.username ? comment.author.username : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Guest\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 86\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, comment._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"No post data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(SinglePost, \"a0gslou0e3dHmefjDcMOCbTr0+U=\", false, function () {\n  return [useSelector, useParams, useQuery, useQuery];\n});\n_c = SinglePost;\nexport default SinglePost;\nvar _c;\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"names":["useQuery","React","useParams","getPostAPI","Card","getCommentsAPI","PostComments","useSelector","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","SinglePost","_s","user","state","_state$auth","auth","_id","data","postData","queryFn","queryKey","commentData","isError","isLoading","error","_post$author","post","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Header","src","author","image","alt","username","Title","title","Body","content","postId","authorId","map","comment","Footer","_c","$RefreshReg$"],"sources":["/Users/danny714/Desktop/FacePage/frontend/src/components/Timeline/SinglePost/SinglePost.jsx"],"sourcesContent":["import { useQuery } from '@tanstack/react-query'\nimport React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getPostAPI } from '../../../services/postServices'\nimport { Card } from 'react-bootstrap'\nimport { getCommentsAPI } from '../../../services/commentServices'\nimport './SinglePost.css'\nimport PostComments from '../Comments/PostComments'\nimport { useSelector } from 'react-redux'\nimport Navbar from '../Navbar/Navbar'\nconst SinglePost = () => {\n\n    const {user} = useSelector((state) => state?.auth?.user)\n    const {_id} = useParams()\n    \n    const {data: postData} = useQuery({\n        queryFn: () => getPostAPI(_id),\n        queryKey: ['post',_id]\n    })\n    \n    const {data: commentData, isError, isLoading, error} = useQuery({\n      queryFn:() => getCommentsAPI(_id),\n      queryKey: ['comment', _id]\n    })\n  \n  if(postData) {\n    const {post} = postData\n    return (\n      <>\n       <Navbar/>\n      <div className = 'single-post-body'>\n        <Card className = 'single-post-card'>\n          <Card.Header>\n            <img className = 'single-post-user-img' src = {post.author?.image} alt = 'user'/>\n            {post && post.author ? post.author.username : <p>No user data</p>}\n          </Card.Header>\n          <Card.Title>\n            {post && post.title ? post.title : <p>No data</p>}\n          </Card.Title>\n          <Card.Body>{post && post.content ? post.content : <p>No data</p>}</Card.Body>\n        </Card>\n        <PostComments postId = {post._id} authorId = {user._id}/>\n        {commentData?.map((comment)=>(\n          <Card className = 'comment-card' key = {comment._id}>\n            <Card.Body>\n              {comment.comment}\n            </Card.Body>\n            <Card.Footer>\n              Comment by - \n              {comment.author && comment.author.username ? comment.author.username : <span>Guest</span>}\n            </Card.Footer>\n          </Card>\n        ))}\n      </div>\n      </>\n    )\n  }\n\n  return (\n    <div>\n      <h1>No post data</h1>\n    </div>\n  )\n}\n\nexport default SinglePost"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}